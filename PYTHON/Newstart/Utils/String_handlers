Splitting:

word = line.split(" <split chars> ") >> line.split(" ") | line.split(":") | default splitter is space
Following is the syntax for split() method :

str.split(str="", num=string.count(str)).
Parameters
str : This is any delimeter, by default it is space.

num : this is number of lines minus one

Return Value
This method returns a list of lines.

Example
The following example shows the usage of split() method.

#!/usr/bin/python

str = "Line1-abcdef \nLine2-abc \nLine4-abcd";
print str.split( )
print str.split(' ', 1 )
When we run above program, it produces following result âˆ’

['Line1-abcdef', 'Line2-abc', 'Line4-abcd']
['Line1-abcdef', '\nLine2-abc \nLine4-abcd']



String Handlers:

word.isalnum()         #check if all char are alphanumeric 
word.isalpha()         #check if all char in the string are alphabetic
word.isdigit()         #test if string contains digits
word.istitle()         #test if string contains title words
word.isupper()         #test if string contains upper case
word.islower()         #test if string contains lower case
word.isspace()         #test if string contains spaces
word.endswith('d')     #test if string endswith a d
word.startswith('H')   #test if string startswith H
letter = word[0]
len(word)
word.count('l')
word.index(" <pattern string> ")

Slicing
Use [ # : # ] to get set of letter

Keep in mind that python, as many other languages, starts to count from 0!! 
word = "Hello World"

print word[0]          #get one char of the word
print word[0:1]        #get one char of the word (same as above)
print word[0:3]        #get the first three char
print word[:3]         #get the first three char
print word[-3:]        #get the last three char
print word[3:]         #get all but the three first char
print word[:-3]        #get all but the three last character
word = "Hello World"
 
 word[start:end]        # items start through end-1
 word[start:]            # items start through the rest of the list
 word[:end]              # items from the beginning through end-1
 word[:]                 # a copy of the whole list

 string = "Hello World"

 >>> print string.upper()
 HELLO WORLD

 >>> print string.lower()
 hello world

 >>> print string.title()
 Hello World

 >>> print string.capitalize()
 Hello world

 >>> print string.swapcase()
 hELLO wORLD



Reversing
string = "Hello World"

>>> print ' '.join(reversed(string))
d l r o W   o l l e H
Strip

Python strings have the strip(), lstrip(), rstrip() methods for removing 
any character from both ends of a string. 

If the characters to be removed are not specified then white-space will be removed

word = "Hello World"
Strip off newline characters from end of the string
>>> print word.strip('
')
Hello World
strip()     #removes from both ends
lstrip()    #removes leading characters (Left-strip)
rstrip()    #removes trailing characters (Right-strip)

>>> word = "    xyz    "

>>> print word
    xyz    

	>>> print word.strip()
	xyz

	>>> print word.lstrip()
	xyz    

	>>> print word.rstrip()
	    xyz
		Concatenation

		To concatenate strings in Python use the "+" operator. 
		"Hello " + "World" # = "Hello World"
		"Hello " + "World" + "!"# = "Hello World!"
		Join
		>>> print ":".join(word)  # #add a : between every char
		H:e:l:l:o: :W:o:r:l:d

		>>> print " ".join(word)  # add a whitespace between every char
		H e l l o   W o r l d
		Testing

		A string in Python can be tested for truth value. 

		The return type will be in Boolean value (True or False)
