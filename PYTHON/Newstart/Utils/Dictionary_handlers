CREATE:

dicto = {}
indra = {"B1" : "MATH", "B2" : "Physics", "B3" : "Chemistry"}
subs = {"MATH" : ["calculas", "Algebra"], "Physics" : ["Mechanics", "optics"], "Chemistry" : "Organic"}
dictionaries = {"en_de" : indra, "de_fr" : subs }
print dictionaries["de_fr"]["Physics"][1]
print dictionaries["en_de"]["B2"]


We can use arbitrary types as values in a dictionary, but there is a restriction for the keys. Only immutable data types can be used as keys, i.e. no lists or dictionaries can be used: 
If you use a mutable data type as a key, you get an error message:
>>> dic = { [1,2,3]:"abc"}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  TypeError: list objects are unhashable
  Tuple as keys are okay, as you can see in the following example:
  >>> dic = { (1,2,3):"abc", 3.1415:"abc"}
  >>> dic
  {3.1415: 'abc', (1, 2, 3): 'abc'}


  Operators on Dictionaries
  Operator
  Explanation
  len(d)
  returns the number of stored entries, i.e. the number of (key,value) pairs.
  del d[k]
  deletes the key k together with his value
  k in d
  True, if a key k exists in the dictionary d
  k not in d
  True, if a key k doesn't exist in the dictionary d


ccessing non Existing Keys
If you try to access a key which doesn't exist, you will get an error message:

>>> words = {"house" : "Haus", "cat":"Katze"}
>>> words["car"]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  KeyError: 'car'
  You can prevent this by using the "in" operator:
  >>> if "car" in words: print words["car"]
  ... 
  >>> if "cat" in words: print words["cat"]
  ... 
  Katze
  Important Methods
  A dictionary can be copied with the method copy():
  >>> w = words.copy()
  >>> words["cat"]="chat"
  >>> print w
  {'house': 'Haus', 'cat': 'Katze'}
  >>> print words
  {'house': 'Haus', 'cat': 'chat'}
  The content of a dictionary can be cleared with the method clear(). The dictionary is not deleted, but set to an empty dictionary:
  >>> w.clear()
  >>> print w
  {}
  Update: Merging Dictionaries
  What about concatenating dictionaries, like we did with lists? There is something similar for dictionaries: the update method
  update() merges the keys and values of one dictionary into another, overwriting values of the same key:

  >>> w={"house":"Haus","cat":"Katze","red":"rot"}
  >>> w1 = {"red":"rouge","blau":"bleu"}
  >>> w.update(w1)
  >>> print w
  {'house': 'Haus', 'blau': 'bleu', 'red': 'rouge', 'cat': 'Katze'}
  Iterating over a Dictionary
  No method is needed to iterate over a dictionary:

  for key in d:
  	print key
	But it's possible to use the method iterkeys():
	for key in d.iterkeys():
		print key
		The method itervalues() is a convenient way for iterating directly over the values:
		for val in d.itervalues():
			print val
			The above loop is of course equivalent to the following one:
			for key in d:
				print d[key]


Lists from Dictionaries
It's possible to create lists from dictionaries by using the methods items(), keys() and values(). As the name implies the method keys() creates a list, which consists solely of the keys of the dictionary. values() produces a list consisting of the values. items() can be used to create a list consisting of 2-tuples of (key,value)-pairs:

>>> w={"house":"Haus","cat":"Katze","red":"rot"}
>>> w.items()
[('house', 'Haus'), ('red', 'rot'), ('cat', 'Katze')]
>>> w.keys()
['house', 'red', 'cat']
>>> w.values()
['Haus', 'rot', 'Katze']
If we apply the method items() to a dictionary, we have no information loss, i.e. it is possible to recreate the original dictionary from the list created by items(). Even though this list of 2-tuples has the same entropy, i.e. the information content is the same, the efficiency of both approaches is completely different. The dictionary data type provides highly efficient methods to access, delete and change elements of the dictionary, while in the case of lists these functions have to be implemented by the programmer.
Dictionaries from Lists
Now we will turn our attention to the art of cooking, but don't be afraid, this remains a python course and not a cooking course. We want to show you, how to turn lists into dictionaries, if these lists satisfy certain conditions. 
We have two lists, one containing the dishes and the other one the corresponding countries:
>>> dishes = ["pizza", "sauerkraut", "paella", "Hamburger"]
>>> countries = ["Italy", "Germany", "Spain", "USA"]
Now we will create a dictionary, which assigns a dish to a country, of course according to the common prejudices. For this purpose we need the function zip(). The name zip was well chosen, because the two lists get combined like a zipper. 
>>> country_specialities = zip(countries, dishes)
>>> print country_specialities
[('Italy', 'pizza'), ('Germany', 'sauerkraut'), ('Spain', 'paella'), ('USA', 'Hamburger')]
>>> 
The variable country_specialities contains now the "dictionary" in the 2-tuple list form. This form can be easily transformed into a real dictionary with the function dict().
>>> country_specialities_dict = dict(country_specialities)
>>> print country_specialities_dict
{'Germany': 'sauerkraut', 'Spain': 'paella', 'Italy': 'pizza', 'USA': 'Hamburger'}
>>> 
There is still one question concerning the function zip(). What happens, if one of the two argument lists contains more elements than the other one? It's easy: The superfluous elements will not be used:
>>> countries = ["Italy", "Germany", "Spain", "USA", "Switzerland"]
>>> dishes = ["pizza", "sauerkraut", "paella", "Hamburger"]
>>> country_specialities = zip(countries,dishes)
>>> print country_specialities
[('Italy', 'pizza'), ('Germany', 'sauerkraut'), ('Spain', 'paella'), ('USA', 'Hamburger')]
So in this course, we will not answer the burning question, what the national dish of Switzerland is. 


Built-in Dictionary Functions & Methods
Python includes the following dictionary functions −

Sr.No.    Function with Description
1    cmp(dict1, dict2)
Compares elements of both dict.

2    len(dict)
Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.

3    str(dict)
Produces a printable string representation of a dictionary

4    type(variable)
Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.

Python includes following dictionary methods −

Sr.No.    Methods with Description
1    dict.clear()
Removes all elements of dictionary dict

2    dict.copy()
Returns a shallow copy of dictionary dict

3    dict.fromkeys()
Create a new dictionary with keys from seq and values set to value.

4    dict.get(key, default=None)
For key key, returns value or default if key not in dictionary

5    dict.has_key(key)
Returns true if key in dictionary dict, false otherwise

6    dict.items()
Returns a list of dict's (key, value) tuple pairs

7    dict.keys()
Returns list of dictionary dict's keys

8    dict.setdefault(key, default=None)
Similar to get(), but will set dict[key]=default if key is not already in dict

9    dict.update(dict2)
Adds dictionary dict2's key-values pairs to dict

10    dict.values()
Returns list of dictionary dict's values


